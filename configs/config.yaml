denoiser:
  _target_: dasr.models.facebook_denoiser.get_pretrained_model
  name: "dns64"
  freeze_encoder: True
  freeze_lstm: False
  freeze_decoder: False

# Some magical params from facebook denoiser
facebook_denoiser:
  segment: 4

device: "cuda"

asr: 
  _target_: dasr.asr.wav2vec.Wav2VecEnv
  device: "cuda"
  path_model: "jonatasgrosman/wav2vec2-large-xlsr-53-russian"
  asr_metric: "cer"
  loss_type: "ctc"
  # baseline: 0.25

train:
  optimizer:
    _target_: torch.optim.Adam
    learning_rate: 0.0003
  trainer: 
    _target_: dasr.train.trainer.Trainer
  n_epoch: 1000
  use_asr_loss: True
  use_geom_loss: True
  n_epoch_before_asr_loss: 0
  asr_loss_coef: 0.2
   
loss: 
  _target_: dasr.losses.loss_factory.AdditiveLoss
  criteria: "l1"
  use_sfft_loss: True
  factor_sc: 0.5
  factor_mag: 0.5

wandb:
  _target_: dasr.logger.wandb_logger.WandbLogger
  project_name: "dasr"
  # run_name: "wav2vec+pretrained_dns64 (freeze encoder), SNR=10, train[0:3000], reinforce baseline=0.25"
  run_name: "wav2vec+pretrained_dns64 [lr=3e-4] (freeze encoder), SNR=10, train[0:3000] CTC"
  # run_name: "[sanity-check] wav2vec, SNR=10, train[0:2] only CTC, simple_denoiser_lstm"

data:
  _target_: dasr.train.pl_data.DASRDataModule
  batch_size: 4
  collate_class: 
    _target_: dasr.datasets.make_dataloaders.CollateWithPadd
  train_dataset:
    _target_: dasr.datasets.random_noise.RandomNoiseSNR
    desire_snr_db: 10
    max_length: False
    common_voice_subset: 
      _target_: dasr.datasets.common_voice.get_common_voice_subset
      split: "train[0:3000]"
  val_dataset:
    _target_: dasr.datasets.random_noise.RandomNoiseSNR
    desire_snr_db: 10
    max_length: False
    common_voice_subset: 
      _target_: dasr.datasets.common_voice.get_common_voice_subset
      split: "test[0:200]"
